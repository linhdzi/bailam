import 'dart:io';

class Product {
  int id;
  String name;
  int price;
  double quantity;

  Product(this.id, this.name, this.price, this.quantity);
}

void main() {
  List<Product> products = [];

  while (true) {
    print("\nProduct Management System");
    print("1. Add products");
    print("2. Sort products by price");
    print("3. Count products by specific price");
    print("4. Find product(s) with highest price");
    print("5. Find product(s) with highest total price");
    print("6. Exit");
    stdout.write("Enter your choice: ");
    String? choice = stdin.readLineSync();

    switch (choice) {
      case '1':
        addProducts(products);
        break;
      case '2':
        sortProducts(products);
        break;
      case '3':
        countProductsByPrice(products);
        break;
      case '4':
        findHighestPriceProducts(products);
        break;
      case '5':
        findHighestTotalPriceProducts(products);
        break;
      case '6':
        print("Exiting program...");
        return;
      default:
        print("Invalid choice. Please try again.");
    }
  }
}

void addProducts(List<Product> products) {
  stdout.write("Enter the total number of products: ");
  int numProducts = int.parse(stdin.readLineSync()!);

  for (int i = 0; i < numProducts; i++) {
    print("Enter details for product ${i + 1}:");
    int id;
    String name;
    int price;
    double quantity;

    while (true) {
      stdout.write("ID (integer): ");
      String? idInput = stdin.readLineSync();
      if (int.tryParse(idInput!) != null) {
        id = int.parse(idInput);
        break;
      }
      print("Invalid ID. Please enter an integer.");
    }

    while (true) {
      stdout.write("Name (2-200 chars): ");
      name = stdin.readLineSync()!;
      if (name.length >= 2 && name.length <= 200) {
        break;
      }
      print("Invalid name. Please enter between 2 and 200 characters.");
    }

    while (true) {
      stdout.write("Price (0-1000): ");
      String? priceInput = stdin.readLineSync();
      if (int.tryParse(priceInput!) != null && int.parse(priceInput) >= 0 && int.parse(priceInput) <= 1000) {
        price = int.parse(priceInput);
        break;
      }
      print("Invalid price. Enter a value between 0 and 1000.");
    }

    while (true) {
      stdout.write("Quantity (>0): ");
      String? quantityInput = stdin.readLineSync();
      if (double.tryParse(quantityInput!) != null && double.parse(quantityInput) > 0) {
        quantity = double.parse(quantityInput);
        break;
      }
      print("Invalid quantity. Please enter a value greater than 0.");
    }

    products.add(Product(id, name, price, quantity));
  }
  print("Products added successfully!");
}

void sortProducts(List<Product> products) {
  products.sort((a, b) => a.price.compareTo(b.price));
  print("Products sorted by price:");
  for (var product in products) {
    print("ID: ${product.id}, Name: ${product.name}, Price: ${product.price}, Quantity: ${product.quantity}");
  }
}

void countProductsByPrice(List<Product> products) {
  stdout.write("Enter price to search: ");
  int searchPrice = int.parse(stdin.readLineSync()!);
  int count = products.where((p) => p.price == searchPrice).length;
  print("There are $count product(s) with price: $searchPrice");
}

void findHighestPriceProducts(List<Product> products) {
  if (products.isEmpty) {
    print("No products available.");
    return;
  }
  int maxPrice = products.map((p) => p.price).reduce((a, b) => a > b ? a : b);
  var highestPriceProducts = products.where((p) => p.price == maxPrice);
  print("Product(s) with highest price:");
  for (var product in highestPriceProducts) {
    print("ID: ${product.id}, Name: ${product.name}, Price: ${product.price}, Quantity: ${product.quantity}");
  }
}

void findHighestTotalPriceProducts(List<Product> products) {
  if (products.isEmpty) {
    print("No products available.");
    return;
  }
  double maxTotalPrice = products.map((p) => p.price * p.quantity).reduce((a, b) => a > b ? a : b);
  var highestTotalPriceProducts = products.where((p) => p.price * p.quantity == maxTotalPrice);
  print("Product(s) with highest total price:");
  for (var product in highestTotalPriceProducts) {
    print("ID: ${product.id}, Name: ${product.name}, Price: ${product.price}, Quantity: ${product.quantity}, Total Price: ${product.price * product.quantity}");
  }
}
